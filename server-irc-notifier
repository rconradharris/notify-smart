#!/usr/bin/env python
"""
Send a email/SMS notification if the user is idle on their laptop.

Idle is determined by the user running a program on their laptop
(client-irc-notifier) which constantly sends idle-time back to the server where
this script runs.

This script doesn't exit and is intended to be run inside a GNU screen
session window

Configure using .irssi/server-irc-notifier.cfg
"""

import ConfigParser
import os
import random
import subprocess
import sys
import time


CONFIG_FILE = '.irssi/server-irc-notifier.cfg'
IDLE_TIME_PATH = '.irssi/idle-time'
FORCE_IDLE_PATH = '.irssi/force-idle'
FNOTIFY_LOG = '.irssi/fnotify'

DEFAULT_DEBUGLEVEL = 0
DEFAULT_POLL_INTERVAL = 1.0
DEFAULT_TITLE = '[IRC]'


def get_idle_time_and_last_updated():
    if os.path.exists(IDLE_TIME_PATH):
        with open(IDLE_TIME_PATH) as f:
            try:
                idle_time = float(f.read().strip())
            except ValueError:
                pass
            else:
                last_updated = time.time() - os.path.getmtime(IDLE_TIME_PATH)
                return (idle_time, last_updated)
    return (None, None)


def get_is_idle(cfg, idle_time, last_updated):
    """Determine whether the user is considered idle.

    A script on the users laptop is updating the local `idle-time` file.

    If the `idle-time` file doesn't exist, then the user is by definition idle
    (because they haven't logged in to create it).

    Alternatively, the user can be 'forcing' a particular mode; this is
    signaled by the `force-idle` file with the following values:

            0 NORMAL
            1 FORCE IDLE
            2 FORCE NOT IDLE

    If the `idle-time` file is present, we have two possibilities:

        1) File hasn't been touched in a while: This means the laptop is no
        longer active (from our perspective) and we should consider the user
        idle.

        2) The file has been touched recently: In this case the laptop is
        active (since we're receiving idle reports), however the user might
        not be at their desk. So in this case, use the contents of `idle-time`
        file to determine what to do.
    """

    # Check for force values first...
    if os.path.exists(FORCE_IDLE_PATH):
        with open(FORCE_IDLE_PATH) as f:
            force_val = int(f.read().strip())
        if force_val == 1:
            return True, 'Forced'
        elif force_val == 2:
            return False, 'Forced'
        else:
            os.unlink(FORCE_IDLE_PATH)
            # Fall through to normal logic...

    # Ensure idle-time file exists...
    if not idle_time and not last_updated:
        return True, "idle-time file doesn't exist or is empty"

    idle_threshold  = cfg.getint('general', 'idle')

    # Ensure idle-time file isn't stale
    if last_updated > idle_threshold:
        return (True, 'idle-time is stale ({:.2f} > {})'.format(
                    last_updated, idle_threshold))

    # Ensure contents (idle-time) are under threshold
    if idle_time > idle_threshold:
        return (True,  'idle threshold exceeded ({:.2f} > {})'.format(
                    idle_time, idle_threshold))
    else:
        return (False, 'below threshold ({:.2f} <= {})'.format(
                    idle_time, idle_threshold))


class NotifierError(Exception):
    pass


class Notifier(object):
    def __init__(self, cfg):
        self.cfg = cfg

    def notify(self, msg):
        pass

    def _get_title(self):
        try:
            return self.cfg.get('general', 'title')
        except ConfigParser.NoOptionError:
            return DEFAULT_TITLE

    @staticmethod
    def get(cfg):
        name = cfg.get('general', 'notifier')
        cls = NOTIFIERS[name]
        return cls(cfg)


class EmailNotifier(Notifier):
    @staticmethod
    def _smtp_connect(host, user, password, debuglevel=0):
        import smtplib

        server = smtplib.SMTP(host)
        server.set_debuglevel(debuglevel)
        server.ehlo()
        server.starttls()
        server.login(user, password)
        return server

    @staticmethod
    def _smtp_close(server):
        server.quit()

    @staticmethod
    def _smtp_send(server, from_email, to_email, body=None, subject=None):
        from email.mime.text import MIMEText

        msg = MIMEText(body)
        if subject:
            msg['Subject'] = subject
        msg['From'] = from_email
        msg['To'] = to_email
        server.sendmail(from_email, [to_email], msg.as_string())

    def notify(self, msg):
        try:
            debuglevel = self.cfg.getint('email', 'debuglevel')
        except ConfigParser.NoOptionError:
            debuglevel = DEFAULT_DEBUGLEVEL

        try:
            server = self._smtp_connect(self.cfg.get('email', 'smtp_host'),
                                        self.cfg.get('email', 'smtp_user'),
                                        self.cfg.get('email', 'smtp_password'),
                                        debuglevel=debuglevel)
        except:
            raise NotifierError

        try:
            self._smtp_send(server,
                            self.cfg.get('email', 'from_email'),
                            self.cfg.get('email', 'to_email'),
                            body=msg,
                            subject=self._get_title())
        except:
            raise NotifierError
        finally:
            self._smtp_close(server)


class PushoverNotifier(Notifier):
    API_URL = 'https://api.pushover.net/1/messages.json'

    def notify(self, msg):
        import requests

        data = {
            'token': self.cfg.get('pushover', 'app_token'),
            'user': self.cfg.get('pushover', 'user_api_key'),
            'title': self._get_title(),
            'message': msg
        }

        resp = requests.post(self.API_URL, data=data)
        if not resp.ok:
            raise NotifierError


NOTIFIERS = {
    'email': EmailNotifier,
    'pushover': PushoverNotifier
}


def start(cfg):
    notifier = Notifier.get(cfg)

    try:
        poll_interval  = cfg.getfloat('general', 'poll_interval')
    except ConfigParser.NoOptionError:
        poll_interval = DEFAULT_POLL_INTERVAL

    last_fnotify_mtime =  os.path.getmtime(FNOTIFY_LOG)

    while True:
        idle_time, last_updated = get_idle_time_and_last_updated()
        is_idle, reason = get_is_idle(cfg, idle_time, last_updated)

        if idle_time is not None:
            print "IDLE_TIME = {:<8.2f} LAST UPDATED = {:<8.2f} IDLE = {:<8}"\
                  "REASON = {}".format(idle_time, last_updated, str(is_idle),
                                       reason)

        # Only process if fnotify file was updated since last read...
        cur_fnotify_mtime =  os.path.getmtime(FNOTIFY_LOG)

        if is_idle and (cur_fnotify_mtime != last_fnotify_mtime):
            last_fnotify_mtime = cur_fnotify_mtime

            with open(FNOTIFY_LOG) as f:
                msg =  f.read().splitlines()[-1]
                print "Sending Notification: ", msg
                notifier.notify(msg)

        time.sleep(poll_interval)


def test(cfg):
    notifier = Notifier.get(cfg)
    notifier.notify(random.choice(['apple', 'blackberry', 'cherry',
                                   'dewberry', 'elderberry']))


def usage():
        print "server-irc-notifier <start|test>"
        sys.exit(1)


if __name__ == '__main__':
    if len(sys.argv) < 2:
        usage()

    if not os.path.exists(CONFIG_FILE):
        print "error: required config file not found at '{}'".format(CONFIG_FILE)
        sys.exit(1)

    cfg = ConfigParser.ConfigParser()
    cfg.read(CONFIG_FILE)

    if sys.argv[1] == 'start':
        start(cfg)
    elif sys.argv[1] == 'test':
        test(cfg)
    else:
        usage()
