#!/usr/bin/env python
"""
Send a email/SMS notification if the user is idle on their laptop.

Idle is determined by the user running a program on their laptop
(client-irc-notifier) which constantly sends idle-time back to the server where
this script runs.

This script doesn't exit and is intended to be run inside a GNU screen
session window

Configure using .irssi/server-irc-notifier.cfg
"""

import os
import random
import subprocess
import sys
import time
import urllib

import config


CONFIG_PATH = os.path.expanduser('~/.irssi')
IDLE_TIME_FILE = os.path.join(CONFIG_PATH, 'idle-time')
FORCE_IDLE_FILE = os.path.join(CONFIG_PATH, 'force-idle')
FNOTIFY_LOG = os.path.join(CONFIG_PATH, 'fnotify')

DEFAULT_DEBUGLEVEL = 0
DEFAULT_POLL_INTERVAL = 1.0
DEFAULT_IDLE_THRESHOLD = 60.0
DEFAULT_TITLE = '[IRC]'

CONST_IDLE = 9999.0  # For our purposes, this will do as a maxint
CONST_NOT_IDLE = -1.0


def safe_read_float(filename):
    """Read a file and interpret value as a float.

    Returns `None` if file is not present, or value is invalid.
    """
    if os.path.exists(filename):
        with open(filename) as f:
            try:
                return float(f.read().strip())
            except ValueError:
                pass
    return None


def get_idle_time():
    """Return a time in seconds since a user was last seen or CONST_IDLE or
    CONST_NOT_IDLE if we're forcing a particular value.
    """
    # Check for force values first...
    force_val = safe_read_float(FORCE_IDLE_FILE)
    if force_val is not None:
        if force_val == 1.0:
            return CONST_IDLE
        elif force_val == 2.0:
            return CONST_NOT_IDLE

    idle_time = safe_read_float(IDLE_TIME_FILE)

    # Ensure idle-time file is present...
    if idle_time is None:
        return CONST_IDLE

    # Check when idle-time file was last-updated
    last_updated = time.time() - os.path.getmtime(IDLE_TIME_FILE)

    # If file is 'stale', then use last_updated, otherwise return the time in
    # the idle-time file
    return last_updated if last_updated > idle_time else idle_time



class Message(object):
    URL_TEMPLATE = "https://{server}:5000/channel/{network}/{target}?secret={secret}"

    def __init__(self, network, target, text):
        self.network = network
        self.target = target
        self.text = text

    def __repr__(self):
        return "<Message network='{network}' target='{target}' text='{text}'>".format(
            network=self.network, target=self.target, text=self.text)

    @property
    def title(self):
        return config.get('notifier', 'title', default=DEFAULT_TITLE)

    @property
    def url(self):
        server = config.get('reply', 'server')
        secret = config.get('reply', 'secret')
        return self.URL_TEMPLATE.format(server=server,
                                        secret=secret,
                                        network=urllib.quote(self.network),
                                        target=urllib.quote(self.target))

    @property
    def url_title(self):
        return 'Reply'

    @classmethod
    def from_raw_text(cls, raw_text):
        parts = raw_text.split(' ')
        network = parts[0]
        target = parts[1]
        text = ' '.join(parts[2:])
        return cls(network, target, text)


class NotifierError(Exception):
    pass


class Notifier(object):
    def notify(self, msg):
        raise NotImplementedError

    @staticmethod
    def get():
        name = config.get('notifier', 'plugin')
        cls = NOTIFIERS[name]
        return cls()


class EmailNotifier(Notifier):
    @staticmethod
    def _smtp_connect(host, user, password, debuglevel=0):
        import smtplib

        server = smtplib.SMTP(host)
        server.set_debuglevel(debuglevel)
        server.ehlo()
        server.starttls()
        server.login(user, password)
        return server

    @staticmethod
    def _smtp_close(server):
        server.quit()

    @staticmethod
    def _smtp_send(server, from_email, to_email, body=None, subject=None):
        from email.mime.text import MIMEText

        msg = MIMEText(body)
        if subject:
            msg['Subject'] = subject
        msg['From'] = from_email
        msg['To'] = to_email
        server.sendmail(from_email, [to_email], msg.as_string())

    def notify(self, msg):
        debuglevel = int(config.get('email', 'debuglevel',
                                    default=DEFAULT_DEBUGLEVEL))
        try:
            server = self._smtp_connect(config.get('email', 'smtp_host'),
                                        config.get('email', 'smtp_user'),
                                        config.get('email', 'smtp_password'),
                                        debuglevel=debuglevel)
        except:
            raise NotifierError

        body = msg.text
        if msg.url:
            body += ' ' + msg.url

        try:
            self._smtp_send(server,
                            config.get('email', 'from_email'),
                            config.get('email', 'to_email'),
                            body=body,
                            subject=msg.title)
        except:
            raise NotifierError
        finally:
            self._smtp_close(server)


class PushoverNotifier(Notifier):
    API_URL = 'https://api.pushover.net/1/messages.json'

    def notify(self, msg):
        import requests

        data = {
            'token': config.get('pushover', 'app_token'),
            'user': config.get('pushover', 'user_api_key'),
            'title': msg.title,
            'message': msg.text
        }

        if msg.url:
            data['url'] = msg.url
        if msg.url_title:
            data['url_title'] = msg.url_title

        resp = requests.post(self.API_URL, data=data)
        if not resp.ok:
            raise NotifierError


NOTIFIERS = {
    'email': EmailNotifier,
    'pushover': PushoverNotifier
}


LAST_MTIME = None


def process():
    global LAST_MTIME

    if not os.path.exists(FNOTIFY_LOG):
        print "warning: No fnotify file present..."
        return

    idle_time = get_idle_time()

    threshold  = float(config.get('notifier', 'idle',
                                  default=DEFAULT_IDLE_THRESHOLD))

    print "IDLE TIME = {:<10.1f} "\
          "THRESHOLD = {:<10.1f} "\
          "STATUS = {:<10}".format(
                  idle_time,
                  threshold,
                  'IDLE' if idle_time > threshold else 'NOT IDLE')

    mtime = os.path.getmtime(FNOTIFY_LOG)

    # Don't send last message recv'd on startup...
    if LAST_MTIME is None:
        LAST_MTIME = mtime

    if mtime > LAST_MTIME:
        # Update LAST_MTIME to ensure we don't resend the msg
        LAST_MTIME = mtime

        if idle_time > threshold:
            with open(FNOTIFY_LOG) as f:
                raw_text =  f.read().splitlines()[-1]
                msg = Message.from_raw_text(raw_text)
                print "Sending Notification: ", msg
                Notifier.get().notify(msg)


if __name__ == '__main__':
    poll_interval  = float(config.get('notifier', 'poll_interval',
                                      default=DEFAULT_POLL_INTERVAL))
    while True:
        process()
        time.sleep(poll_interval)
